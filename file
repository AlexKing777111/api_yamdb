============================= test session starts ==============================
platform linux -- Python 3.8.10, pytest-6.2.4, py-1.11.0, pluggy-0.13.1 -- /home/salex/Dev/api_yamdb/env/bin/python3
django: settings: api_yamdb.settings (from ini)
rootdir: /home/salex/Dev/api_yamdb, configfile: pytest.ini, testpaths: tests/
plugins: django-4.4.0, pythonpath-0.7.3
collecting ... collected 53 items

tests/test_00_user_registration.py::Test00UserRegistration::test_00_nodata_signup PASSED [  1%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_invalid_data_signup PASSED [  3%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_user_signup FAILED [  5%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_admin_create_user FAILED [  7%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_obtain_jwt_token_invalid_data FAILED [  9%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_me_username_restricted FAILED [ 11%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_same_email_restricted FAILED [ 13%]
tests/test_01_users.py::Test01UserAPI::test_01_users_not_authenticated PASSED [ 15%]
tests/test_01_users.py::Test01UserAPI::test_02_users_username_not_authenticated PASSED [ 16%]
tests/test_01_users.py::Test01UserAPI::test_03_users_me_not_authenticated PASSED [ 18%]
tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin FAILED    [ 20%]
tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search FAILED [ 22%]
tests/test_01_users.py::Test01UserAPI::test_04_01_users_get_admin_only PASSED [ 24%]
tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin FAILED [ 26%]
tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_user_superuser PASSED [ 28%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_admin FAILED [ 30%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_not_admin PASSED [ 32%]
tests/test_01_users.py::Test01UserAPI::test_07_01_users_username_patch_admin FAILED [ 33%]
tests/test_01_users.py::Test01UserAPI::test_07_02_users_username_patch_moderator PASSED [ 35%]
tests/test_01_users.py::Test01UserAPI::test_07_03_users_username_patch_user PASSED [ 37%]
tests/test_01_users.py::Test01UserAPI::test_07_05_users_username_put_user_restricted PASSED [ 39%]
tests/test_01_users.py::Test01UserAPI::test_08_01_users_username_delete_admin FAILED [ 41%]
tests/test_01_users.py::Test01UserAPI::test_08_02_users_username_delete_moderator PASSED [ 43%]
tests/test_01_users.py::Test01UserAPI::test_08_03_users_username_delete_user PASSED [ 45%]
tests/test_01_users.py::Test01UserAPI::test_08_04_users_username_delete_superuser PASSED [ 47%]
tests/test_01_users.py::Test01UserAPI::test_09_users_check_permissions FAILED [ 49%]
tests/test_01_users.py::Test01UserAPI::test_10_users_me_get_admin FAILED [ 50%]
tests/test_01_users.py::Test01UserAPI::test_11_01_users_me_patch_admin FAILED [ 52%]
tests/test_01_users.py::Test01UserAPI::test_11_02_users_me_patch_user FAILED [ 54%]
tests/test_02_category.py::Test02CategoryAPI::test_01_category_not_auth FAILED [ 56%]
tests/test_02_category.py::Test02CategoryAPI::test_02_category_admin FAILED [ 58%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_delete_admin FAILED [ 60%]
tests/test_02_category.py::Test02CategoryAPI::test_04_category_check_permission_admin FAILED [ 62%]
tests/test_02_category.py::Test02CategoryAPI::test_05_category_create_user PASSED [ 64%]
tests/test_02_category.py::Test02CategoryAPI::test_06_category_create_moderator PASSED [ 66%]
tests/test_03_genre.py::Test03GenreAPI::test_01_genre_not_auth FAILED    [ 67%]
tests/test_03_genre.py::Test03GenreAPI::test_02_genre FAILED             [ 69%]
tests/test_03_genre.py::Test03GenreAPI::test_03_genres_delete FAILED     [ 71%]
tests/test_03_genre.py::Test03GenreAPI::test_04_genres_check_permission FAILED [ 73%]
tests/test_03_genre.py::Test03GenreAPI::test_05_genre_create_user PASSED [ 75%]
tests/test_03_genre.py::Test03GenreAPI::test_06_genre_create_moderator PASSED [ 77%]
tests/test_04_title.py::Test04TitleAPI::test_01_title_not_auth PASSED    [ 79%]
tests/test_04_title.py::Test04TitleAPI::test_02_title_admin FAILED       [ 81%]
tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail FAILED     [ 83%]
tests/test_04_title.py::Test04TitleAPI::test_04_titles_check_permission FAILED [ 84%]
tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth PASSED [ 86%]
tests/test_05_review.py::Test05ReviewAPI::test_02_review_admin FAILED    [ 88%]
tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail FAILED   [ 90%]
tests/test_05_review.py::Test05ReviewAPI::test_04_reviews_check_permission FAILED [ 92%]
tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth FAILED [ 94%]
tests/test_06_comment.py::Test06CommentAPI::test_02_comment FAILED       [ 96%]
tests/test_06_comment.py::Test06CommentAPI::test_03_review_detail FAILED [ 98%]
tests/test_06_comment.py::Test06CommentAPI::test_04_comment_check_permission FAILED [100%]

=================================== FAILURES ===================================
____________ Test00UserRegistration.test_00_valid_data_user_signup _____________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x7f60f3c0a760>
client = <django.test.client.Client object at 0x7f60f372c040>

    @pytest.mark.django_db(transaction=True)
    def test_00_valid_data_user_signup(self, client):
    
        valid_email = 'valid@yamdb.fake'
        valid_username = 'valid_username'
        outbox_before_count = len(mail.outbox)
    
        valid_data = {
            'email': valid_email,
            'username': valid_username
        }
        request_type = 'POST'
>       response = client.post(self.url_signup, data=valid_data)

tests/test_00_user_registration.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.8/site-packages/django/test/client.py:543: in post
    response = super().post(path, data=data, content_type=content_type, secure=secure, **extra)
env/lib/python3.8/site-packages/django/test/client.py:356: in post
    return self.generic('POST', path, post_data, content_type,
env/lib/python3.8/site-packages/django/test/client.py:422: in generic
    return self.request(**r)
env/lib/python3.8/site-packages/django/test/client.py:503: in request
    raise exc_value
env/lib/python3.8/site-packages/django/core/handlers/exception.py:34: in inner
    response = get_response(request)
env/lib/python3.8/site-packages/django/core/handlers/base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
env/lib/python3.8/site-packages/django/core/handlers/base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
env/lib/python3.8/site-packages/django/views/decorators/csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
env/lib/python3.8/site-packages/django/views/generic/base.py:71: in view
    return self.dispatch(request, *args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/views.py:509: in dispatch
    response = self.handle_exception(exc)
env/lib/python3.8/site-packages/rest_framework/views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
env/lib/python3.8/site-packages/rest_framework/views.py:480: in raise_uncaught_exception
    raise exc
env/lib/python3.8/site-packages/rest_framework/views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/decorators.py:50: in handler
    return func(*args, **kwargs)
api_yamdb/users/views.py:31: in send_confirmation_code
    token = default_token_generator.make_token(user)
env/lib/python3.8/site-packages/django/contrib/auth/tokens.py:21: in make_token
    return self._make_token_with_timestamp(user, self._num_days(self._today()))
env/lib/python3.8/site-packages/django/contrib/auth/tokens.py:60: in _make_token_with_timestamp
    self._make_hash_value(user, timestamp),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.contrib.auth.tokens.PasswordResetTokenGenerator object at 0x7f60f449cc40>
user = <User: valid_username>, timestamp = 7763

    def _make_hash_value(self, user, timestamp):
        """
        Hash the user's primary key and some user state that's sure to change
        after a password reset to produce a token that invalidated when it's
        used:
        1. The password field will change upon a password reset (even if the
           same password is chosen, due to password salting).
        2. The last_login field will usually be updated very shortly after
           a password reset.
        Failing those things, settings.PASSWORD_RESET_TIMEOUT_DAYS eventually
        invalidates the token.
    
        Running this data through salted_hmac() prevents password cracking
        attempts using the reset token, provided the secret isn't compromised.
        """
        # Truncate microseconds so that tokens are consistent even if the
        # database doesn't support microseconds.
        login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)
>       return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)
E       TypeError: can only concatenate str (not "NoneType") to str

env/lib/python3.8/site-packages/django/contrib/auth/tokens.py:83: TypeError
------------------------------ Captured log call -------------------------------
ERROR    django.request:log.py:222 Internal Server Error: /api/v1/auth/signup/
Traceback (most recent call last):
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/exception.py", line 34, in inner
    response = get_response(request)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/views/generic/base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/decorators.py", line 50, in handler
    return func(*args, **kwargs)
  File "/home/salex/Dev/api_yamdb/api_yamdb/users/views.py", line 31, in send_confirmation_code
    token = default_token_generator.make_token(user)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/contrib/auth/tokens.py", line 21, in make_token
    return self._make_token_with_timestamp(user, self._num_days(self._today()))
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/contrib/auth/tokens.py", line 60, in _make_token_with_timestamp
    self._make_hash_value(user, timestamp),
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/contrib/auth/tokens.py", line 83, in _make_hash_value
    return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)
TypeError: can only concatenate str (not "NoneType") to str
_________ Test00UserRegistration.test_00_valid_data_admin_create_user __________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x7f60f3623190>
admin_client = <rest_framework.test.APIClient object at 0x7f60f3606370>

    @pytest.mark.django_db(transaction=True)
    def test_00_valid_data_admin_create_user(self, admin_client):
    
        valid_email = 'valid@yamdb.fake'
        valid_username = 'valid_username'
        outbox_before_count = len(mail.outbox)
    
        valid_data = {
            'email': valid_email,
            'username': valid_username
        }
        request_type = 'POST'
        response = admin_client.post(self.url_admin_create_user, data=valid_data)
        outbox_after = mail.outbox
    
        assert response.status_code != 404, (
            f'Страница `{self.url_admin_create_user}` не найдена, проверьте этот адрес в *urls.py*'
        )
    
        code = 201
>       assert response.status_code == code, (
            f'Проверьте, что при {request_type} запросе `{self.url_admin_create_user}` с валидными данными '
            f'от имени администратора, создается пользователь и возвращается статус {code}'
        )
E       AssertionError: Проверьте, что при POST запросе `/api/v1/users/` с валидными данными от имени администратора, создается пользователь и возвращается статус 201
E       assert 403 == 201
E         +403
E         -201

tests/test_00_user_registration.py:142: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/
_________ Test00UserRegistration.test_00_obtain_jwt_token_invalid_data _________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x7f60f36aef40>
client = <django.test.client.Client object at 0x7f60f36de1f0>

    @pytest.mark.django_db(transaction=True)
    def test_00_obtain_jwt_token_invalid_data(self, client):
    
        request_type = 'POST'
        response = client.post(self.url_token)
        assert response.status_code != 404, (
            f'Страница `{self.url_token}` не найдена, проверьте этот адрес в *urls.py*'
        )
    
        code = 400
        assert response.status_code == code, (
            f'Проверьте, что при POST запросе `{self.url_token}` без параметров, '
            f'возвращается статус {code}'
        )
    
        invalid_data = {
            'confirmation_code': 12345
        }
        response = client.post(self.url_token, data=invalid_data)
        assert response.status_code == code, (
            f'Проверьте, что при POST запросе `{self.url_token}` без username, '
            f'возвращается статус {code}'
        )
    
        invalid_data = {
            'username': 'unexisting_user',
            'confirmation_code': 12345
        }
        response = client.post(self.url_token, data=invalid_data)
        code = 404
        assert response.status_code == code, (
            f'Проверьте, что при POST запросе `{self.url_token}` с несуществующим username, '
            f'возвращается статус {code}'
        )
    
        valid_email = 'valid@yamdb.fake'
        valid_username = 'valid_username'
    
        valid_data = {
            'email': valid_email,
            'username': valid_username
        }
>       response = client.post(self.url_signup, data=valid_data)

tests/test_00_user_registration.py:209: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.8/site-packages/django/test/client.py:543: in post
    response = super().post(path, data=data, content_type=content_type, secure=secure, **extra)
env/lib/python3.8/site-packages/django/test/client.py:356: in post
    return self.generic('POST', path, post_data, content_type,
env/lib/python3.8/site-packages/django/test/client.py:422: in generic
    return self.request(**r)
env/lib/python3.8/site-packages/django/test/client.py:503: in request
    raise exc_value
env/lib/python3.8/site-packages/django/core/handlers/exception.py:34: in inner
    response = get_response(request)
env/lib/python3.8/site-packages/django/core/handlers/base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
env/lib/python3.8/site-packages/django/core/handlers/base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
env/lib/python3.8/site-packages/django/views/decorators/csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
env/lib/python3.8/site-packages/django/views/generic/base.py:71: in view
    return self.dispatch(request, *args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/views.py:509: in dispatch
    response = self.handle_exception(exc)
env/lib/python3.8/site-packages/rest_framework/views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
env/lib/python3.8/site-packages/rest_framework/views.py:480: in raise_uncaught_exception
    raise exc
env/lib/python3.8/site-packages/rest_framework/views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/decorators.py:50: in handler
    return func(*args, **kwargs)
api_yamdb/users/views.py:31: in send_confirmation_code
    token = default_token_generator.make_token(user)
env/lib/python3.8/site-packages/django/contrib/auth/tokens.py:21: in make_token
    return self._make_token_with_timestamp(user, self._num_days(self._today()))
env/lib/python3.8/site-packages/django/contrib/auth/tokens.py:60: in _make_token_with_timestamp
    self._make_hash_value(user, timestamp),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.contrib.auth.tokens.PasswordResetTokenGenerator object at 0x7f60f449cc40>
user = <User: valid_username>, timestamp = 7763

    def _make_hash_value(self, user, timestamp):
        """
        Hash the user's primary key and some user state that's sure to change
        after a password reset to produce a token that invalidated when it's
        used:
        1. The password field will change upon a password reset (even if the
           same password is chosen, due to password salting).
        2. The last_login field will usually be updated very shortly after
           a password reset.
        Failing those things, settings.PASSWORD_RESET_TIMEOUT_DAYS eventually
        invalidates the token.
    
        Running this data through salted_hmac() prevents password cracking
        attempts using the reset token, provided the secret isn't compromised.
        """
        # Truncate microseconds so that tokens are consistent even if the
        # database doesn't support microseconds.
        login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)
>       return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)
E       TypeError: can only concatenate str (not "NoneType") to str

env/lib/python3.8/site-packages/django/contrib/auth/tokens.py:83: TypeError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Bad Request: /api/v1/auth/token/
WARNING  django.request:log.py:222 Bad Request: /api/v1/auth/token/
WARNING  django.request:log.py:222 Not Found: /api/v1/auth/token/
ERROR    django.request:log.py:222 Internal Server Error: /api/v1/auth/signup/
Traceback (most recent call last):
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/exception.py", line 34, in inner
    response = get_response(request)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/views/generic/base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/decorators.py", line 50, in handler
    return func(*args, **kwargs)
  File "/home/salex/Dev/api_yamdb/api_yamdb/users/views.py", line 31, in send_confirmation_code
    token = default_token_generator.make_token(user)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/contrib/auth/tokens.py", line 21, in make_token
    return self._make_token_with_timestamp(user, self._num_days(self._today()))
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/contrib/auth/tokens.py", line 60, in _make_token_with_timestamp
    self._make_hash_value(user, timestamp),
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/contrib/auth/tokens.py", line 83, in _make_hash_value
    return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)
TypeError: can only concatenate str (not "NoneType") to str
______ Test00UserRegistration.test_00_registration_me_username_restricted ______

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x7f60f324b940>
client = <django.test.client.Client object at 0x7f60f328e490>

    @pytest.mark.django_db(transaction=True)
    def test_00_registration_me_username_restricted(self, client):
        valid_email = 'valid@yamdb.fake'
        invalid_username = 'me'
        request_type = 'POST'
    
        valid_data = {
            'email': valid_email,
            'username': invalid_username
        }
>       response = client.post(self.url_signup, data=valid_data)

tests/test_00_user_registration.py:237: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.8/site-packages/django/test/client.py:543: in post
    response = super().post(path, data=data, content_type=content_type, secure=secure, **extra)
env/lib/python3.8/site-packages/django/test/client.py:356: in post
    return self.generic('POST', path, post_data, content_type,
env/lib/python3.8/site-packages/django/test/client.py:422: in generic
    return self.request(**r)
env/lib/python3.8/site-packages/django/test/client.py:503: in request
    raise exc_value
env/lib/python3.8/site-packages/django/core/handlers/exception.py:34: in inner
    response = get_response(request)
env/lib/python3.8/site-packages/django/core/handlers/base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
env/lib/python3.8/site-packages/django/core/handlers/base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
env/lib/python3.8/site-packages/django/views/decorators/csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
env/lib/python3.8/site-packages/django/views/generic/base.py:71: in view
    return self.dispatch(request, *args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/views.py:509: in dispatch
    response = self.handle_exception(exc)
env/lib/python3.8/site-packages/rest_framework/views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
env/lib/python3.8/site-packages/rest_framework/views.py:480: in raise_uncaught_exception
    raise exc
env/lib/python3.8/site-packages/rest_framework/views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/decorators.py:50: in handler
    return func(*args, **kwargs)
api_yamdb/users/views.py:31: in send_confirmation_code
    token = default_token_generator.make_token(user)
env/lib/python3.8/site-packages/django/contrib/auth/tokens.py:21: in make_token
    return self._make_token_with_timestamp(user, self._num_days(self._today()))
env/lib/python3.8/site-packages/django/contrib/auth/tokens.py:60: in _make_token_with_timestamp
    self._make_hash_value(user, timestamp),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.contrib.auth.tokens.PasswordResetTokenGenerator object at 0x7f60f449cc40>
user = <User: me>, timestamp = 7763

    def _make_hash_value(self, user, timestamp):
        """
        Hash the user's primary key and some user state that's sure to change
        after a password reset to produce a token that invalidated when it's
        used:
        1. The password field will change upon a password reset (even if the
           same password is chosen, due to password salting).
        2. The last_login field will usually be updated very shortly after
           a password reset.
        Failing those things, settings.PASSWORD_RESET_TIMEOUT_DAYS eventually
        invalidates the token.
    
        Running this data through salted_hmac() prevents password cracking
        attempts using the reset token, provided the secret isn't compromised.
        """
        # Truncate microseconds so that tokens are consistent even if the
        # database doesn't support microseconds.
        login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)
>       return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)
E       TypeError: can only concatenate str (not "NoneType") to str

env/lib/python3.8/site-packages/django/contrib/auth/tokens.py:83: TypeError
------------------------------ Captured log call -------------------------------
ERROR    django.request:log.py:222 Internal Server Error: /api/v1/auth/signup/
Traceback (most recent call last):
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/exception.py", line 34, in inner
    response = get_response(request)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/views/generic/base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/decorators.py", line 50, in handler
    return func(*args, **kwargs)
  File "/home/salex/Dev/api_yamdb/api_yamdb/users/views.py", line 31, in send_confirmation_code
    token = default_token_generator.make_token(user)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/contrib/auth/tokens.py", line 21, in make_token
    return self._make_token_with_timestamp(user, self._num_days(self._today()))
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/contrib/auth/tokens.py", line 60, in _make_token_with_timestamp
    self._make_hash_value(user, timestamp),
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/contrib/auth/tokens.py", line 83, in _make_hash_value
    return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)
TypeError: can only concatenate str (not "NoneType") to str
______ Test00UserRegistration.test_00_registration_same_email_restricted _______

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x7f60f32f6f70>
client = <django.test.client.Client object at 0x7f60f31c5a00>

    @pytest.mark.django_db(transaction=True)
    def test_00_registration_same_email_restricted(self, client):
        valid_email_1 = 'test_duplicate_1@yamdb.fake'
        valid_email_2 = 'test_duplicate_2@yamdb.fake'
        valid_username_1 = 'valid_username_1'
        valid_username_2 = 'valid_username_2'
        request_type = 'POST'
    
        valid_data = {
            'email': valid_email_1,
            'username': valid_username_1
        }
>       response = client.post(self.url_signup, data=valid_data)

tests/test_00_user_registration.py:256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.8/site-packages/django/test/client.py:543: in post
    response = super().post(path, data=data, content_type=content_type, secure=secure, **extra)
env/lib/python3.8/site-packages/django/test/client.py:356: in post
    return self.generic('POST', path, post_data, content_type,
env/lib/python3.8/site-packages/django/test/client.py:422: in generic
    return self.request(**r)
env/lib/python3.8/site-packages/django/test/client.py:503: in request
    raise exc_value
env/lib/python3.8/site-packages/django/core/handlers/exception.py:34: in inner
    response = get_response(request)
env/lib/python3.8/site-packages/django/core/handlers/base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
env/lib/python3.8/site-packages/django/core/handlers/base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
env/lib/python3.8/site-packages/django/views/decorators/csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
env/lib/python3.8/site-packages/django/views/generic/base.py:71: in view
    return self.dispatch(request, *args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/views.py:509: in dispatch
    response = self.handle_exception(exc)
env/lib/python3.8/site-packages/rest_framework/views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
env/lib/python3.8/site-packages/rest_framework/views.py:480: in raise_uncaught_exception
    raise exc
env/lib/python3.8/site-packages/rest_framework/views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/decorators.py:50: in handler
    return func(*args, **kwargs)
api_yamdb/users/views.py:31: in send_confirmation_code
    token = default_token_generator.make_token(user)
env/lib/python3.8/site-packages/django/contrib/auth/tokens.py:21: in make_token
    return self._make_token_with_timestamp(user, self._num_days(self._today()))
env/lib/python3.8/site-packages/django/contrib/auth/tokens.py:60: in _make_token_with_timestamp
    self._make_hash_value(user, timestamp),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.contrib.auth.tokens.PasswordResetTokenGenerator object at 0x7f60f449cc40>
user = <User: valid_username_1>, timestamp = 7763

    def _make_hash_value(self, user, timestamp):
        """
        Hash the user's primary key and some user state that's sure to change
        after a password reset to produce a token that invalidated when it's
        used:
        1. The password field will change upon a password reset (even if the
           same password is chosen, due to password salting).
        2. The last_login field will usually be updated very shortly after
           a password reset.
        Failing those things, settings.PASSWORD_RESET_TIMEOUT_DAYS eventually
        invalidates the token.
    
        Running this data through salted_hmac() prevents password cracking
        attempts using the reset token, provided the secret isn't compromised.
        """
        # Truncate microseconds so that tokens are consistent even if the
        # database doesn't support microseconds.
        login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)
>       return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)
E       TypeError: can only concatenate str (not "NoneType") to str

env/lib/python3.8/site-packages/django/contrib/auth/tokens.py:83: TypeError
------------------------------ Captured log call -------------------------------
ERROR    django.request:log.py:222 Internal Server Error: /api/v1/auth/signup/
Traceback (most recent call last):
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/exception.py", line 34, in inner
    response = get_response(request)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/views/generic/base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/decorators.py", line 50, in handler
    return func(*args, **kwargs)
  File "/home/salex/Dev/api_yamdb/api_yamdb/users/views.py", line 31, in send_confirmation_code
    token = default_token_generator.make_token(user)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/contrib/auth/tokens.py", line 21, in make_token
    return self._make_token_with_timestamp(user, self._num_days(self._today()))
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/contrib/auth/tokens.py", line 60, in _make_token_with_timestamp
    self._make_hash_value(user, timestamp),
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/contrib/auth/tokens.py", line 83, in _make_hash_value
    return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)
TypeError: can only concatenate str (not "NoneType") to str
____________________ Test01UserAPI.test_04_users_get_admin _____________________

self = <tests.test_01_users.Test01UserAPI object at 0x7f60f3312ac0>
admin_client = <rest_framework.test.APIClient object at 0x7f60f31107f0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_users_get_admin(self, admin_client, admin):
        response = admin_client.get('/api/v1/users/')
        assert response.status_code != 404, (
            'Страница `/api/v1/users/` не найдена, проверьте этот адрес в *urls.py*'
        )
>       assert response.status_code == 200, (
            'Проверьте, что при GET запросе `/api/v1/users/` с токеном авторизации возвращается статус 200'
        )
E       AssertionError: Проверьте, что при GET запросе `/api/v1/users/` с токеном авторизации возвращается статус 200
E       assert 403 == 200
E         +403
E         -200

tests/test_01_users.py:51: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/
__________________ Test01UserAPI.test_04_02_users_get_search ___________________

self = <tests.test_01_users.Test01UserAPI object at 0x7f60f3286850>
admin_client = <rest_framework.test.APIClient object at 0x7f60f329ae80>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_02_users_get_search(self, admin_client, admin):
        url = '/api/v1/users/'
        search_url = f'{url}?search={admin.username}'
        response = admin_client.get(search_url)
        assert response.status_code != 404, (
            'Страница `/api/v1/users/?search={username}` не найдена, проверьте этот адрес в *urls.py*'
        )
        reponse_json = response.json()
>       assert 'results' in reponse_json and isinstance(reponse_json.get('results'), list), (
            'Проверьте, что при GET запросе `/api/v1/users/?search={username}` '
            'результаты возвращаются под ключом `results` и в виде списка.'
        )
E       AssertionError: Проверьте, что при GET запросе `/api/v1/users/?search={username}` результаты возвращаются под ключом `results` и в виде списка.
E       assert ('results' in {'detail': 'You do not have permission to perform this action.'})

tests/test_01_users.py:97: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/
__________________ Test01UserAPI.test_05_01_users_post_admin ___________________

self = <tests.test_01_users.Test01UserAPI object at 0x7f60f31b7460>
admin_client = <rest_framework.test.APIClient object at 0x7f60f31ca490>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_05_01_users_post_admin(self, admin_client, admin):
        empty_data = {}
        response = admin_client.post('/api/v1/users/', data=empty_data)
>       assert response.status_code == 400, (
            'Проверьте, что при POST запросе `/api/v1/users/` с пустыми данными возвращаетe 400'
        )
E       AssertionError: Проверьте, что при POST запросе `/api/v1/users/` с пустыми данными возвращаетe 400
E       assert 403 == 400
E         +403
E         -400

tests/test_01_users.py:135: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/
________________ Test01UserAPI.test_06_users_username_get_admin ________________

self = <tests.test_01_users.Test01UserAPI object at 0x7f60f32bf490>
admin_client = <rest_framework.test.APIClient object at 0x7f60f33017c0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_06_users_username_get_admin(self, admin_client, admin):
>       user, moderator = create_users_api(admin_client)

tests/test_01_users.py:272: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
env/lib/python3.8/site-packages/django/db/models/manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
>           raise self.model.DoesNotExist(
                "%s matching query does not exist." %
                self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

env/lib/python3.8/site-packages/django/db/models/query.py:406: DoesNotExist
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/
_____________ Test01UserAPI.test_07_01_users_username_patch_admin ______________

self = <tests.test_01_users.Test01UserAPI object at 0x7f60f325b8e0>
admin_client = <rest_framework.test.APIClient object at 0x7f60f36e2fa0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_07_01_users_username_patch_admin(self, admin_client, admin):
>       user, moderator = create_users_api(admin_client)

tests/test_01_users.py:326: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
env/lib/python3.8/site-packages/django/db/models/manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
>           raise self.model.DoesNotExist(
                "%s matching query does not exist." %
                self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

env/lib/python3.8/site-packages/django/db/models/query.py:406: DoesNotExist
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/
_____________ Test01UserAPI.test_08_01_users_username_delete_admin _____________

self = <tests.test_01_users.Test01UserAPI object at 0x7f60f35a4460>
admin_client = <rest_framework.test.APIClient object at 0x7f60f3abc610>

    @pytest.mark.django_db(transaction=True)
    def test_08_01_users_username_delete_admin(self, admin_client):
>       user, moderator = create_users_api(admin_client)

tests/test_01_users.py:398: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
env/lib/python3.8/site-packages/django/db/models/manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
>           raise self.model.DoesNotExist(
                "%s matching query does not exist." %
                self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

env/lib/python3.8/site-packages/django/db/models/query.py:406: DoesNotExist
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/
________________ Test01UserAPI.test_09_users_check_permissions _________________

self = <tests.test_01_users.Test01UserAPI object at 0x7f60f36ae310>
admin_client = <rest_framework.test.APIClient object at 0x7f60f3a83e80>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_09_users_check_permissions(self, admin_client, admin):
>       user, moderator = create_users_api(admin_client)

tests/test_01_users.py:488: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
env/lib/python3.8/site-packages/django/db/models/manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
>           raise self.model.DoesNotExist(
                "%s matching query does not exist." %
                self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

env/lib/python3.8/site-packages/django/db/models/query.py:406: DoesNotExist
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/
___________________ Test01UserAPI.test_10_users_me_get_admin ___________________

self = <tests.test_01_users.Test01UserAPI object at 0x7f60f3606d60>
admin_client = <rest_framework.test.APIClient object at 0x7f60f322de50>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_10_users_me_get_admin(self, admin_client, admin):
>       user, moderator = create_users_api(admin_client)

tests/test_01_users.py:494: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
env/lib/python3.8/site-packages/django/db/models/manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
>           raise self.model.DoesNotExist(
                "%s matching query does not exist." %
                self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

env/lib/python3.8/site-packages/django/db/models/query.py:406: DoesNotExist
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/
________________ Test01UserAPI.test_11_01_users_me_patch_admin _________________

self = <tests.test_01_users.Test01UserAPI object at 0x7f60f3ae8df0>
admin_client = <rest_framework.test.APIClient object at 0x7f60f3b13c10>

    @pytest.mark.django_db(transaction=True)
    def test_11_01_users_me_patch_admin(self, admin_client):
>       user, moderator = create_users_api(admin_client)

tests/test_01_users.py:528: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
env/lib/python3.8/site-packages/django/db/models/manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
>           raise self.model.DoesNotExist(
                "%s matching query does not exist." %
                self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

env/lib/python3.8/site-packages/django/db/models/query.py:406: DoesNotExist
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/
_________________ Test01UserAPI.test_11_02_users_me_patch_user _________________

self = <tests.test_01_users.Test01UserAPI object at 0x7f60f3103910>
user_client = <rest_framework.test.APIClient object at 0x7f60f3b0bbb0>

    @pytest.mark.django_db(transaction=True)
    def test_11_02_users_me_patch_user(self, user_client):
        data = {
            'first_name': 'New user first name',
            'last_name': 'New user last name',
            'bio': 'new user bio',
        }
        response = user_client.patch('/api/v1/users/me/', data=data)
        assert response.status_code == 200, (
            'Проверьте, что при PATCH запросе `/api/v1/users/me/`, '
            'пользователь с ролью user может изменить свои данные, и возвращается статус 200'
        )
    
        data = {
            'role': 'admin'
        }
        response = user_client.patch('/api/v1/users/me/', data=data)
        response_json = response.json()
>       assert response_json.get('role') == 'user', (
            'Проверьте, что при PATCH запросе `/api/v1/users/me/`, '
            'пользователь с ролью user не может сменить себе роль'
        )
E       AssertionError: Проверьте, что при PATCH запросе `/api/v1/users/me/`, пользователь с ролью user не может сменить себе роль
E       assert 'admin' == 'user'
E         - user
E         + admin

tests/test_01_users.py:570: AssertionError
_________________ Test02CategoryAPI.test_01_category_not_auth __________________

self = <tests.test_02_category.Test02CategoryAPI object at 0x7f60f31a5af0>
client = <django.test.client.Client object at 0x7f60f3a8faf0>

    @pytest.mark.django_db(transaction=True)
    def test_01_category_not_auth(self, client):
>       response = client.get('/api/v1/categories/')

tests/test_02_category.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.8/site-packages/django/test/client.py:535: in get
    response = super().get(path, data=data, secure=secure, **extra)
env/lib/python3.8/site-packages/django/test/client.py:345: in get
    return self.generic('GET', path, secure=secure, **{
env/lib/python3.8/site-packages/django/test/client.py:422: in generic
    return self.request(**r)
env/lib/python3.8/site-packages/django/test/client.py:503: in request
    raise exc_value
env/lib/python3.8/site-packages/django/core/handlers/exception.py:34: in inner
    response = get_response(request)
env/lib/python3.8/site-packages/django/core/handlers/base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
env/lib/python3.8/site-packages/django/core/handlers/base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
env/lib/python3.8/site-packages/django/views/decorators/csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/views.py:509: in dispatch
    response = self.handle_exception(exc)
env/lib/python3.8/site-packages/rest_framework/views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
env/lib/python3.8/site-packages/rest_framework/views.py:480: in raise_uncaught_exception
    raise exc
env/lib/python3.8/site-packages/rest_framework/views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/mixins.py:38: in list
    queryset = self.filter_queryset(self.get_queryset())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <api.views.CategoryViewSet object at 0x7f60f361b850>
queryset = <QuerySet []>

    def filter_queryset(self, queryset):
        """
        Given a queryset, filter it with whichever filter backend is in use.
    
        You are unlikely to want to override this method, although you may need
        to call it either from a list view, or from a custom `get_object`
        method if you want to apply the configured filtering backend to the
        default queryset.
        """
>       for backend in list(self.filter_backends):
E       TypeError: 'type' object is not iterable

env/lib/python3.8/site-packages/rest_framework/generics.py:149: TypeError
------------------------------ Captured log call -------------------------------
ERROR    django.request:log.py:222 Internal Server Error: /api/v1/categories/
Traceback (most recent call last):
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/exception.py", line 34, in inner
    response = get_response(request)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/mixins.py", line 38, in list
    queryset = self.filter_queryset(self.get_queryset())
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/generics.py", line 149, in filter_queryset
    for backend in list(self.filter_backends):
TypeError: 'type' object is not iterable
___________________ Test02CategoryAPI.test_02_category_admin ___________________

self = <tests.test_02_category.Test02CategoryAPI object at 0x7f60f3236ac0>
admin_client = <rest_framework.test.APIClient object at 0x7f60f30d7370>

    @pytest.mark.django_db(transaction=True)
    def test_02_category_admin(self, admin_client):
        data = {}
        response = admin_client.post('/api/v1/categories/', data=data)
        assert response.status_code == 400, (
            'Проверьте, что при POST запросе `/api/v1/categories/` с не правильными данными возвращает статус 400'
        )
        data = {
            'name': 'Фильм',
            'slug': 'films'
        }
        response = admin_client.post('/api/v1/categories/', data=data)
        assert response.status_code == 201, (
            'Проверьте, что при POST запросе `/api/v1/categories/` с правильными данными возвращает статус 201'
        )
        data = {
            'name': 'Новые фильмы',
            'slug': 'films'
        }
        response = admin_client.post('/api/v1/categories/', data=data)
        assert response.status_code == 400, (
            'Проверьте, что при POST запросе `/api/v1/categories/` нельзя создать 2 категории с одинаковым `slug`'
        )
        data = {
            'name': 'Книги',
            'slug': 'books'
        }
        response = admin_client.post('/api/v1/categories/', data=data)
        assert response.status_code == 201, (
            'Проверьте, что при POST запросе `/api/v1/categories/` с правильными данными возвращает статус 201'
        )
>       response = admin_client.get('/api/v1/categories/')

tests/test_02_category.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.8/site-packages/rest_framework/test.py:288: in get
    response = super().get(path, data=data, **extra)
env/lib/python3.8/site-packages/rest_framework/test.py:205: in get
    return self.generic('GET', path, **r)
env/lib/python3.8/site-packages/rest_framework/test.py:233: in generic
    return super().generic(
env/lib/python3.8/site-packages/django/test/client.py:422: in generic
    return self.request(**r)
env/lib/python3.8/site-packages/rest_framework/test.py:285: in request
    return super().request(**kwargs)
env/lib/python3.8/site-packages/rest_framework/test.py:237: in request
    request = super().request(**kwargs)
env/lib/python3.8/site-packages/django/test/client.py:503: in request
    raise exc_value
env/lib/python3.8/site-packages/django/core/handlers/exception.py:34: in inner
    response = get_response(request)
env/lib/python3.8/site-packages/django/core/handlers/base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
env/lib/python3.8/site-packages/django/core/handlers/base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
env/lib/python3.8/site-packages/django/views/decorators/csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/views.py:509: in dispatch
    response = self.handle_exception(exc)
env/lib/python3.8/site-packages/rest_framework/views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
env/lib/python3.8/site-packages/rest_framework/views.py:480: in raise_uncaught_exception
    raise exc
env/lib/python3.8/site-packages/rest_framework/views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/mixins.py:38: in list
    queryset = self.filter_queryset(self.get_queryset())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <api.views.CategoryViewSet object at 0x7f60f326c5e0>
queryset = <QuerySet [<Category: Фильм>, <Category: Книги>]>

    def filter_queryset(self, queryset):
        """
        Given a queryset, filter it with whichever filter backend is in use.
    
        You are unlikely to want to override this method, although you may need
        to call it either from a list view, or from a custom `get_object`
        method if you want to apply the configured filtering backend to the
        default queryset.
        """
>       for backend in list(self.filter_backends):
E       TypeError: 'type' object is not iterable

env/lib/python3.8/site-packages/rest_framework/generics.py:149: TypeError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Bad Request: /api/v1/categories/
WARNING  django.request:log.py:222 Bad Request: /api/v1/categories/
ERROR    django.request:log.py:222 Internal Server Error: /api/v1/categories/
Traceback (most recent call last):
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/exception.py", line 34, in inner
    response = get_response(request)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/mixins.py", line 38, in list
    queryset = self.filter_queryset(self.get_queryset())
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/generics.py", line 149, in filter_queryset
    for backend in list(self.filter_backends):
TypeError: 'type' object is not iterable
_______________ Test02CategoryAPI.test_03_category_delete_admin ________________

self = <tests.test_02_category.Test02CategoryAPI object at 0x7f60f32498e0>
admin_client = <rest_framework.test.APIClient object at 0x7f60f3249c70>

    @pytest.mark.django_db(transaction=True)
    def test_03_category_delete_admin(self, admin_client):
        create_categories(admin_client)
>       response = admin_client.delete('/api/v1/categories/books/')

tests/test_02_category.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.8/site-packages/rest_framework/test.py:319: in delete
    response = super().delete(
env/lib/python3.8/site-packages/rest_framework/test.py:221: in delete
    return self.generic('DELETE', path, data, content_type, **extra)
env/lib/python3.8/site-packages/rest_framework/test.py:233: in generic
    return super().generic(
env/lib/python3.8/site-packages/django/test/client.py:422: in generic
    return self.request(**r)
env/lib/python3.8/site-packages/rest_framework/test.py:285: in request
    return super().request(**kwargs)
env/lib/python3.8/site-packages/rest_framework/test.py:237: in request
    request = super().request(**kwargs)
env/lib/python3.8/site-packages/django/test/client.py:503: in request
    raise exc_value
env/lib/python3.8/site-packages/django/core/handlers/exception.py:34: in inner
    response = get_response(request)
env/lib/python3.8/site-packages/django/core/handlers/base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
env/lib/python3.8/site-packages/django/core/handlers/base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
env/lib/python3.8/site-packages/django/views/decorators/csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/views.py:509: in dispatch
    response = self.handle_exception(exc)
env/lib/python3.8/site-packages/rest_framework/views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
env/lib/python3.8/site-packages/rest_framework/views.py:480: in raise_uncaught_exception
    raise exc
env/lib/python3.8/site-packages/rest_framework/views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/mixins.py:90: in destroy
    instance = self.get_object()
env/lib/python3.8/site-packages/rest_framework/generics.py:83: in get_object
    queryset = self.filter_queryset(self.get_queryset())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <api.views.CategoryViewSet object at 0x7f60f3135eb0>
queryset = <QuerySet [<Category: Фильм>, <Category: Книги>]>

    def filter_queryset(self, queryset):
        """
        Given a queryset, filter it with whichever filter backend is in use.
    
        You are unlikely to want to override this method, although you may need
        to call it either from a list view, or from a custom `get_object`
        method if you want to apply the configured filtering backend to the
        default queryset.
        """
>       for backend in list(self.filter_backends):
E       TypeError: 'type' object is not iterable

env/lib/python3.8/site-packages/rest_framework/generics.py:149: TypeError
------------------------------ Captured log call -------------------------------
ERROR    django.request:log.py:222 Internal Server Error: /api/v1/categories/books/
Traceback (most recent call last):
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/exception.py", line 34, in inner
    response = get_response(request)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/generics.py", line 149, in filter_queryset
    for backend in list(self.filter_backends):
TypeError: 'type' object is not iterable
__________ Test02CategoryAPI.test_04_category_check_permission_admin ___________

self = <tests.test_02_category.Test02CategoryAPI object at 0x7f60f3178b50>
client = <django.test.client.Client object at 0x7f60f3175970>
admin_client = <rest_framework.test.APIClient object at 0x7f60f3132fd0>

    @pytest.mark.django_db(transaction=True)
    def test_04_category_check_permission_admin(self, client, admin_client):
        categories = create_categories(admin_client)
        data = {
            'name': 'Музыка',
            'slug': 'music'
        }
>       response = client.post('/api/v1/categories/', data=data)

tests/test_02_category.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.8/site-packages/django/test/client.py:543: in post
    response = super().post(path, data=data, content_type=content_type, secure=secure, **extra)
env/lib/python3.8/site-packages/django/test/client.py:356: in post
    return self.generic('POST', path, post_data, content_type,
env/lib/python3.8/site-packages/django/test/client.py:422: in generic
    return self.request(**r)
env/lib/python3.8/site-packages/django/test/client.py:503: in request
    raise exc_value
env/lib/python3.8/site-packages/django/core/handlers/exception.py:34: in inner
    response = get_response(request)
env/lib/python3.8/site-packages/django/core/handlers/base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
env/lib/python3.8/site-packages/django/core/handlers/base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
env/lib/python3.8/site-packages/django/views/decorators/csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/views.py:509: in dispatch
    response = self.handle_exception(exc)
env/lib/python3.8/site-packages/rest_framework/views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
env/lib/python3.8/site-packages/rest_framework/views.py:480: in raise_uncaught_exception
    raise exc
env/lib/python3.8/site-packages/rest_framework/views.py:497: in dispatch
    self.initial(request, *args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/views.py:415: in initial
    self.check_permissions(request)
env/lib/python3.8/site-packages/rest_framework/views.py:332: in check_permissions
    if not permission.has_permission(request, self):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <api.permissions.AdminUser object at 0x7f60f32c0ca0>
request = <rest_framework.request.Request: POST '/api/v1/categories/'>
view = <api.views.CategoryViewSet object at 0x7f60f32c0a60>

    def has_permission(self, request, view):
>       return(request.user.role == 'admin')
E       AttributeError: 'AnonymousUser' object has no attribute 'role'

api_yamdb/api/permissions.py:32: AttributeError
------------------------------ Captured log call -------------------------------
ERROR    django.request:log.py:222 Internal Server Error: /api/v1/categories/
Traceback (most recent call last):
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/exception.py", line 34, in inner
    response = get_response(request)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 497, in dispatch
    self.initial(request, *args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 415, in initial
    self.check_permissions(request)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 332, in check_permissions
    if not permission.has_permission(request, self):
  File "/home/salex/Dev/api_yamdb/api_yamdb/api/permissions.py", line 32, in has_permission
    return(request.user.role == 'admin')
AttributeError: 'AnonymousUser' object has no attribute 'role'
____________________ Test03GenreAPI.test_01_genre_not_auth _____________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x7f60f31844c0>
client = <django.test.client.Client object at 0x7f60f316c0a0>

    @pytest.mark.django_db(transaction=True)
    def test_01_genre_not_auth(self, client):
>       response = client.get('/api/v1/genres/')

tests/test_03_genre.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.8/site-packages/django/test/client.py:535: in get
    response = super().get(path, data=data, secure=secure, **extra)
env/lib/python3.8/site-packages/django/test/client.py:345: in get
    return self.generic('GET', path, secure=secure, **{
env/lib/python3.8/site-packages/django/test/client.py:422: in generic
    return self.request(**r)
env/lib/python3.8/site-packages/django/test/client.py:503: in request
    raise exc_value
env/lib/python3.8/site-packages/django/core/handlers/exception.py:34: in inner
    response = get_response(request)
env/lib/python3.8/site-packages/django/core/handlers/base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
env/lib/python3.8/site-packages/django/core/handlers/base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
env/lib/python3.8/site-packages/django/views/decorators/csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/views.py:509: in dispatch
    response = self.handle_exception(exc)
env/lib/python3.8/site-packages/rest_framework/views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
env/lib/python3.8/site-packages/rest_framework/views.py:480: in raise_uncaught_exception
    raise exc
env/lib/python3.8/site-packages/rest_framework/views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/mixins.py:38: in list
    queryset = self.filter_queryset(self.get_queryset())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <api.views.GenreViewSet object at 0x7f60f3220730>
queryset = <QuerySet []>

    def filter_queryset(self, queryset):
        """
        Given a queryset, filter it with whichever filter backend is in use.
    
        You are unlikely to want to override this method, although you may need
        to call it either from a list view, or from a custom `get_object`
        method if you want to apply the configured filtering backend to the
        default queryset.
        """
>       for backend in list(self.filter_backends):
E       TypeError: 'type' object is not iterable

env/lib/python3.8/site-packages/rest_framework/generics.py:149: TypeError
------------------------------ Captured log call -------------------------------
ERROR    django.request:log.py:222 Internal Server Error: /api/v1/genres/
Traceback (most recent call last):
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/exception.py", line 34, in inner
    response = get_response(request)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/mixins.py", line 38, in list
    queryset = self.filter_queryset(self.get_queryset())
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/generics.py", line 149, in filter_queryset
    for backend in list(self.filter_backends):
TypeError: 'type' object is not iterable
_________________________ Test03GenreAPI.test_02_genre _________________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x7f60f30a3580>
admin_client = <rest_framework.test.APIClient object at 0x7f60f30a3dc0>

    @pytest.mark.django_db(transaction=True)
    def test_02_genre(self, admin_client):
        data = {}
        response = admin_client.post('/api/v1/genres/', data=data)
        assert response.status_code == 400, (
            'Проверьте, что при POST запросе `/api/v1/genres/` с не правильными данными возвращает статус 400'
        )
        data = {'name': 'Ужасы', 'slug': 'horror'}
        response = admin_client.post('/api/v1/genres/', data=data)
        assert response.status_code == 201, (
            'Проверьте, что при POST запросе `/api/v1/genres/` с правильными данными возвращает статус 201'
        )
        data = {'name': 'Триллер', 'slug': 'horror'}
        response = admin_client.post('/api/v1/genres/', data=data)
        assert response.status_code == 400, (
            'Проверьте, что при POST запросе `/api/v1/genres/` нельзя создать 2 жанра с одинаковым `slug`'
        )
        data = {'name': 'Комедия', 'slug': 'comedy'}
        response = admin_client.post('/api/v1/genres/', data=data)
        assert response.status_code == 201, (
            'Проверьте, что при POST запросе `/api/v1/genres/` с правильными данными возвращает статус 201'
        )
>       response = admin_client.get('/api/v1/genres/')

tests/test_03_genre.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.8/site-packages/rest_framework/test.py:288: in get
    response = super().get(path, data=data, **extra)
env/lib/python3.8/site-packages/rest_framework/test.py:205: in get
    return self.generic('GET', path, **r)
env/lib/python3.8/site-packages/rest_framework/test.py:233: in generic
    return super().generic(
env/lib/python3.8/site-packages/django/test/client.py:422: in generic
    return self.request(**r)
env/lib/python3.8/site-packages/rest_framework/test.py:285: in request
    return super().request(**kwargs)
env/lib/python3.8/site-packages/rest_framework/test.py:237: in request
    request = super().request(**kwargs)
env/lib/python3.8/site-packages/django/test/client.py:503: in request
    raise exc_value
env/lib/python3.8/site-packages/django/core/handlers/exception.py:34: in inner
    response = get_response(request)
env/lib/python3.8/site-packages/django/core/handlers/base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
env/lib/python3.8/site-packages/django/core/handlers/base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
env/lib/python3.8/site-packages/django/views/decorators/csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/views.py:509: in dispatch
    response = self.handle_exception(exc)
env/lib/python3.8/site-packages/rest_framework/views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
env/lib/python3.8/site-packages/rest_framework/views.py:480: in raise_uncaught_exception
    raise exc
env/lib/python3.8/site-packages/rest_framework/views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/mixins.py:38: in list
    queryset = self.filter_queryset(self.get_queryset())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <api.views.GenreViewSet object at 0x7f60f3725c10>
queryset = <QuerySet [<Genre: Ужасы>, <Genre: Комедия>]>

    def filter_queryset(self, queryset):
        """
        Given a queryset, filter it with whichever filter backend is in use.
    
        You are unlikely to want to override this method, although you may need
        to call it either from a list view, or from a custom `get_object`
        method if you want to apply the configured filtering backend to the
        default queryset.
        """
>       for backend in list(self.filter_backends):
E       TypeError: 'type' object is not iterable

env/lib/python3.8/site-packages/rest_framework/generics.py:149: TypeError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Bad Request: /api/v1/genres/
WARNING  django.request:log.py:222 Bad Request: /api/v1/genres/
ERROR    django.request:log.py:222 Internal Server Error: /api/v1/genres/
Traceback (most recent call last):
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/exception.py", line 34, in inner
    response = get_response(request)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/mixins.py", line 38, in list
    queryset = self.filter_queryset(self.get_queryset())
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/generics.py", line 149, in filter_queryset
    for backend in list(self.filter_backends):
TypeError: 'type' object is not iterable
_____________________ Test03GenreAPI.test_03_genres_delete _____________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x7f60f3a704c0>
admin_client = <rest_framework.test.APIClient object at 0x7f60f311d880>

    @pytest.mark.django_db(transaction=True)
    def test_03_genres_delete(self, admin_client):
        genres = create_genre(admin_client)
>       response = admin_client.delete(f'/api/v1/genres/{genres[0]["slug"]}/')

tests/test_03_genre.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.8/site-packages/rest_framework/test.py:319: in delete
    response = super().delete(
env/lib/python3.8/site-packages/rest_framework/test.py:221: in delete
    return self.generic('DELETE', path, data, content_type, **extra)
env/lib/python3.8/site-packages/rest_framework/test.py:233: in generic
    return super().generic(
env/lib/python3.8/site-packages/django/test/client.py:422: in generic
    return self.request(**r)
env/lib/python3.8/site-packages/rest_framework/test.py:285: in request
    return super().request(**kwargs)
env/lib/python3.8/site-packages/rest_framework/test.py:237: in request
    request = super().request(**kwargs)
env/lib/python3.8/site-packages/django/test/client.py:503: in request
    raise exc_value
env/lib/python3.8/site-packages/django/core/handlers/exception.py:34: in inner
    response = get_response(request)
env/lib/python3.8/site-packages/django/core/handlers/base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
env/lib/python3.8/site-packages/django/core/handlers/base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
env/lib/python3.8/site-packages/django/views/decorators/csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/views.py:509: in dispatch
    response = self.handle_exception(exc)
env/lib/python3.8/site-packages/rest_framework/views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
env/lib/python3.8/site-packages/rest_framework/views.py:480: in raise_uncaught_exception
    raise exc
env/lib/python3.8/site-packages/rest_framework/views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/mixins.py:90: in destroy
    instance = self.get_object()
env/lib/python3.8/site-packages/rest_framework/generics.py:83: in get_object
    queryset = self.filter_queryset(self.get_queryset())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <api.views.GenreViewSet object at 0x7f60f3b0bbb0>
queryset = <QuerySet [<Genre: Ужасы>, <Genre: Комедия>, <Genre: Драма>]>

    def filter_queryset(self, queryset):
        """
        Given a queryset, filter it with whichever filter backend is in use.
    
        You are unlikely to want to override this method, although you may need
        to call it either from a list view, or from a custom `get_object`
        method if you want to apply the configured filtering backend to the
        default queryset.
        """
>       for backend in list(self.filter_backends):
E       TypeError: 'type' object is not iterable

env/lib/python3.8/site-packages/rest_framework/generics.py:149: TypeError
------------------------------ Captured log call -------------------------------
ERROR    django.request:log.py:222 Internal Server Error: /api/v1/genres/horror/
Traceback (most recent call last):
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/exception.py", line 34, in inner
    response = get_response(request)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/mixins.py", line 90, in destroy
    instance = self.get_object()
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/generics.py", line 83, in get_object
    queryset = self.filter_queryset(self.get_queryset())
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/generics.py", line 149, in filter_queryset
    for backend in list(self.filter_backends):
TypeError: 'type' object is not iterable
________________ Test03GenreAPI.test_04_genres_check_permission ________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x7f60f306fd30>
client = <django.test.client.Client object at 0x7f60f3093550>
admin_client = <rest_framework.test.APIClient object at 0x7f60f3093880>

    @pytest.mark.django_db(transaction=True)
    def test_04_genres_check_permission(self, client, admin_client):
        genres = create_genre(admin_client)
        data = {
            'name': 'Боевик',
            'slug': 'action'
        }
>       response = client.post('/api/v1/genres/', data=data)

tests/test_03_genre.py:128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.8/site-packages/django/test/client.py:543: in post
    response = super().post(path, data=data, content_type=content_type, secure=secure, **extra)
env/lib/python3.8/site-packages/django/test/client.py:356: in post
    return self.generic('POST', path, post_data, content_type,
env/lib/python3.8/site-packages/django/test/client.py:422: in generic
    return self.request(**r)
env/lib/python3.8/site-packages/django/test/client.py:503: in request
    raise exc_value
env/lib/python3.8/site-packages/django/core/handlers/exception.py:34: in inner
    response = get_response(request)
env/lib/python3.8/site-packages/django/core/handlers/base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
env/lib/python3.8/site-packages/django/core/handlers/base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
env/lib/python3.8/site-packages/django/views/decorators/csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/views.py:509: in dispatch
    response = self.handle_exception(exc)
env/lib/python3.8/site-packages/rest_framework/views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
env/lib/python3.8/site-packages/rest_framework/views.py:480: in raise_uncaught_exception
    raise exc
env/lib/python3.8/site-packages/rest_framework/views.py:497: in dispatch
    self.initial(request, *args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/views.py:415: in initial
    self.check_permissions(request)
env/lib/python3.8/site-packages/rest_framework/views.py:332: in check_permissions
    if not permission.has_permission(request, self):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <api.permissions.AdminUser object at 0x7f60f30d52b0>
request = <rest_framework.request.Request: POST '/api/v1/genres/'>
view = <api.views.GenreViewSet object at 0x7f60f30d5fd0>

    def has_permission(self, request, view):
>       return(request.user.role == 'admin')
E       AttributeError: 'AnonymousUser' object has no attribute 'role'

api_yamdb/api/permissions.py:32: AttributeError
------------------------------ Captured log call -------------------------------
ERROR    django.request:log.py:222 Internal Server Error: /api/v1/genres/
Traceback (most recent call last):
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/exception.py", line 34, in inner
    response = get_response(request)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 497, in dispatch
    self.initial(request, *args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 415, in initial
    self.check_permissions(request)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 332, in check_permissions
    if not permission.has_permission(request, self):
  File "/home/salex/Dev/api_yamdb/api_yamdb/api/permissions.py", line 32, in has_permission
    return(request.user.role == 'admin')
AttributeError: 'AnonymousUser' object has no attribute 'role'
______________________ Test04TitleAPI.test_02_title_admin ______________________

self = <tests.test_04_title.Test04TitleAPI object at 0x7f60f30a1100>
admin_client = <rest_framework.test.APIClient object at 0x7f60f32876d0>

    @pytest.mark.django_db(transaction=True)
    def test_02_title_admin(self, admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        data = {}
        response = admin_client.post('/api/v1/titles/', data=data)
        assert response.status_code == 400, (
            'Проверьте, что при POST запросе `/api/v1/titles/` с не правильными данными возвращает статус 400'
        )
        data = {'name': 'Поворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': 'Крутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
        assert response.status_code == 201, (
            'Проверьте, что при POST запросе `/api/v1/titles/` с правильными данными возвращает статус 201'
        )
        data = {'name': 'Проект', 'year': 2020, 'genre': [genres[2]['slug']], 'category': categories[1]['slug'],
                'description': 'Главная драма года'}
        response = admin_client.post('/api/v1/titles/', data=data)
        assert response.status_code == 201, (
            'Проверьте, что при POST запросе `/api/v1/titles/` с правильными данными возвращает статус 201'
        )
        assert type(response.json().get('id')) == int, (
            'Проверьте, что при POST запросе `/api/v1/titles/` возвращаете данные созданного объекта. '
            'Значение `id` нет или не является целым числом.'
        )
        response = admin_client.get('/api/v1/titles/')
        assert response.status_code == 200, (
            'Проверьте, что при GET запросе `/api/v1/titles/` возвращает статус 200'
        )
        data = response.json()
        assert 'count' in data, (
            'Проверьте, что при GET запросе `/api/v1/titles/` возвращаете данные с пагинацией. '
            'Не найден параметр `count`'
        )
        assert 'next' in data, (
            'Проверьте, что при GET запросе `/api/v1/titles/` возвращаете данные с пагинацией. '
            'Не найден параметр `next`'
        )
        assert 'previous' in data, (
            'Проверьте, что при GET запросе `/api/v1/titles/` возвращаете данные с пагинацией. '
            'Не найден параметр `previous`'
        )
        assert 'results' in data, (
            'Проверьте, что при GET запросе `/api/v1/titles/` возвращаете данные с пагинацией. '
            'Не найден параметр `results`'
        )
        assert data['count'] == 2, (
            'Проверьте, что при GET запросе `/api/v1/titles/` возвращаете данные с пагинацией. '
            'Значение параметра `count` не правильное'
        )
        assert type(data['results']) == list, (
            'Проверьте, что при GET запросе `/api/v1/titles/` возвращаете данные с пагинацией. '
            'Тип параметра `results` должен быть список'
        )
        assert len(data['results']) == 2, (
            'Проверьте, что при GET запросе `/api/v1/titles/` возвращаете данные с пагинацией. '
            'Значение параметра `results` не правильное'
        )
        if data['results'][0].get('name') == 'Поворот туда':
            title = data['results'][0]
        elif data['results'][1].get('name') == 'Поворот туда':
            title = data['results'][1]
        else:
            assert False, (
                'Проверьте, что при GET запросе `/api/v1/titles/` возвращаете данные с пагинацией. '
                'Значение параметра `results` неправильное, `name` не найдено или не сохранилось при POST запросе.'
            )
    
        assert title.get('rating') is None, (
            'Проверьте, что при GET запросе `/api/v1/titles/` возвращаете данные с пагинацией. '
            'Значение параметра `results` неправильное, `rating` без отзывов должен быть равен `None`'
        )
>       assert title.get('category') == categories[0], (
            'Проверьте, что при GET запросе `/api/v1/titles/` возвращаете данные с пагинацией. '
            'Значение параметра `results` неправильное, значение `category` неправильное '
            'или не сохранилось при POST запросе.'
        )
E       AssertionError: Проверьте, что при GET запросе `/api/v1/titles/` возвращаете данные с пагинацией. Значение параметра `results` неправильное, значение `category` неправильное или не сохранилось при POST запросе.
E       assert {'id': 7, 'name': 'Фильм', 'slug': 'films'} == {'name': 'Фильм', 'slug': 'films'}
E         Common items:
E         {'name': 'Фильм', 'slug': 'films'}
E         Left contains 1 more item:
E         {'id': 7}
E         Full diff:
E         - {'name': 'Фильм', 'slug': 'films'}
E         + {'id': 7, 'name': 'Фильм', 'slug': 'films'}
E         ?  +++++++++

tests/test_04_title.py:91: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Bad Request: /api/v1/titles/
_____________________ Test04TitleAPI.test_03_titles_detail _____________________

self = <tests.test_04_title.Test04TitleAPI object at 0x7f60f3ac85e0>
client = <django.test.client.Client object at 0x7f60f312b4f0>
admin_client = <rest_framework.test.APIClient object at 0x7f60f3a45e80>

    @pytest.mark.django_db(transaction=True)
    def test_03_titles_detail(self, client, admin_client):
        titles, categories, genres = create_titles(admin_client)
        response = client.get(f'/api/v1/titles/{titles[0]["id"]}/')
        assert response.status_code != 404, (
            'Страница `/api/v1/titles/{title_id}/` не найдена, проверьте этот адрес в *urls.py*'
        )
        assert response.status_code == 200, (
            'Проверьте, что при GET запросе `/api/v1/titles/{title_id}/` '
            'без токена авторизации возвращается статус 200'
        )
        data = response.json()
        assert type(data.get('id')) == int, (
            'Проверьте, что при GET запросе `/api/v1/titles/{title_id}/` возвращаете данные объекта. '
            'Значение `id` нет или не является целым числом.'
        )
>       assert data.get('category') == categories[0], (
            'Проверьте, что при GET запросе `/api/v1/titles/{title_id}/` возвращаете данные объекта. '
            'Значение `category` неправильное.'
        )
E       AssertionError: Проверьте, что при GET запросе `/api/v1/titles/{title_id}/` возвращаете данные объекта. Значение `category` неправильное.
E       assert {'id': 9, 'name': 'Фильм', 'slug': 'films'} == {'name': 'Фильм', 'slug': 'films'}
E         Common items:
E         {'name': 'Фильм', 'slug': 'films'}
E         Left contains 1 more item:
E         {'id': 9}
E         Full diff:
E         - {'name': 'Фильм', 'slug': 'films'}
E         + {'id': 9, 'name': 'Фильм', 'slug': 'films'}
E         ?  +++++++++

tests/test_04_title.py:165: AssertionError
________________ Test04TitleAPI.test_04_titles_check_permission ________________

self = <tests.test_04_title.Test04TitleAPI object at 0x7f60f3ac8190>
client = <django.test.client.Client object at 0x7f60f32b3a60>
admin_client = <rest_framework.test.APIClient object at 0x7f60f31bfc10>

    @pytest.mark.django_db(transaction=True)
    def test_04_titles_check_permission(self, client, admin_client):
        titles, categories, genres = create_titles(admin_client)
        data = {'name': 'Чудо юдо', 'year': 1999, 'genre': [genres[2]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': 'Бум'}
>       response = client.post('/api/v1/titles/', data=data)

tests/test_04_title.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.8/site-packages/django/test/client.py:543: in post
    response = super().post(path, data=data, content_type=content_type, secure=secure, **extra)
env/lib/python3.8/site-packages/django/test/client.py:356: in post
    return self.generic('POST', path, post_data, content_type,
env/lib/python3.8/site-packages/django/test/client.py:422: in generic
    return self.request(**r)
env/lib/python3.8/site-packages/django/test/client.py:503: in request
    raise exc_value
env/lib/python3.8/site-packages/django/core/handlers/exception.py:34: in inner
    response = get_response(request)
env/lib/python3.8/site-packages/django/core/handlers/base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
env/lib/python3.8/site-packages/django/core/handlers/base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
env/lib/python3.8/site-packages/django/views/decorators/csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/views.py:509: in dispatch
    response = self.handle_exception(exc)
env/lib/python3.8/site-packages/rest_framework/views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
env/lib/python3.8/site-packages/rest_framework/views.py:480: in raise_uncaught_exception
    raise exc
env/lib/python3.8/site-packages/rest_framework/views.py:497: in dispatch
    self.initial(request, *args, **kwargs)
env/lib/python3.8/site-packages/rest_framework/views.py:415: in initial
    self.check_permissions(request)
env/lib/python3.8/site-packages/rest_framework/views.py:332: in check_permissions
    if not permission.has_permission(request, self):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <api.permissions.AdminUser object at 0x7f60f3a39c40>
request = <rest_framework.request.Request: POST '/api/v1/titles/'>
view = <api.views.TitleViewSet object at 0x7f60f3a39610>

    def has_permission(self, request, view):
>       return(request.user.role == 'admin')
E       AttributeError: 'AnonymousUser' object has no attribute 'role'

api_yamdb/api/permissions.py:32: AttributeError
------------------------------ Captured log call -------------------------------
ERROR    django.request:log.py:222 Internal Server Error: /api/v1/titles/
Traceback (most recent call last):
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/exception.py", line 34, in inner
    response = get_response(request)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/core/handlers/base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 497, in dispatch
    self.initial(request, *args, **kwargs)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 415, in initial
    self.check_permissions(request)
  File "/home/salex/Dev/api_yamdb/env/lib/python3.8/site-packages/rest_framework/views.py", line 332, in check_permissions
    if not permission.has_permission(request, self):
  File "/home/salex/Dev/api_yamdb/api_yamdb/api/permissions.py", line 32, in has_permission
    return(request.user.role == 'admin')
AttributeError: 'AnonymousUser' object has no attribute 'role'
_____________________ Test05ReviewAPI.test_02_review_admin _____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x7f60f2f74820>
admin_client = <rest_framework.test.APIClient object at 0x7f60f3abcd60>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_review_admin(self, admin_client, admin):
        titles, _, _ = create_titles(admin_client)
>       user, moderator = create_users_api(admin_client)

tests/test_05_review.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
env/lib/python3.8/site-packages/django/db/models/manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
>           raise self.model.DoesNotExist(
                "%s matching query does not exist." %
                self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

env/lib/python3.8/site-packages/django/db/models/query.py:406: DoesNotExist
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/
____________________ Test05ReviewAPI.test_03_review_detail _____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x7f60f32c0c40>
client = <django.test.client.Client object at 0x7f60f32c0790>
admin_client = <rest_framework.test.APIClient object at 0x7f60f32d67c0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_03_review_detail(self, client, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests/test_05_review.py:202: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/common.py:86: in create_reviews
    user, moderator = create_users_api(admin_client)
tests/common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
env/lib/python3.8/site-packages/django/db/models/manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
>           raise self.model.DoesNotExist(
                "%s matching query does not exist." %
                self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

env/lib/python3.8/site-packages/django/db/models/query.py:406: DoesNotExist
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/
_______________ Test05ReviewAPI.test_04_reviews_check_permission _______________

self = <tests.test_05_review.Test05ReviewAPI object at 0x7f60f3aabd30>
client = <django.test.client.Client object at 0x7f60f3250e50>
admin_client = <rest_framework.test.APIClient object at 0x7f60f32bf8e0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_reviews_check_permission(self, client, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests/test_05_review.py:319: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/common.py:86: in create_reviews
    user, moderator = create_users_api(admin_client)
tests/common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
env/lib/python3.8/site-packages/django/db/models/manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
>           raise self.model.DoesNotExist(
                "%s matching query does not exist." %
                self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

env/lib/python3.8/site-packages/django/db/models/query.py:406: DoesNotExist
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/
__________________ Test06CommentAPI.test_01_comment_not_auth ___________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x7f60f3aabca0>
client = <django.test.client.Client object at 0x7f60f3173be0>
admin_client = <rest_framework.test.APIClient object at 0x7f60f30087c0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_01_comment_not_auth(self, client, admin_client, admin):
>       reviews, titles, _, _ = create_reviews(admin_client, admin)

tests/test_06_comment.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/common.py:86: in create_reviews
    user, moderator = create_users_api(admin_client)
tests/common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
env/lib/python3.8/site-packages/django/db/models/manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
>           raise self.model.DoesNotExist(
                "%s matching query does not exist." %
                self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

env/lib/python3.8/site-packages/django/db/models/query.py:406: DoesNotExist
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/
_______________________ Test06CommentAPI.test_02_comment _______________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x7f60f3aa3700>
admin_client = <rest_framework.test.APIClient object at 0x7f60f3606c70>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_comment(self, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests/test_06_comment.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/common.py:86: in create_reviews
    user, moderator = create_users_api(admin_client)
tests/common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
env/lib/python3.8/site-packages/django/db/models/manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
>           raise self.model.DoesNotExist(
                "%s matching query does not exist." %
                self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

env/lib/python3.8/site-packages/django/db/models/query.py:406: DoesNotExist
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/
____________________ Test06CommentAPI.test_03_review_detail ____________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x7f60f35a0700>
client = <django.test.client.Client object at 0x7f60f300f490>
admin_client = <rest_framework.test.APIClient object at 0x7f60f300fdf0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_03_review_detail(self, client, admin_client, admin):
>       comments, reviews, titles, user, moderator = create_comments(admin_client, admin)

tests/test_06_comment.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/common.py:105: in create_comments
    reviews, titles, user, moderator = create_reviews(admin_client, admin)
tests/common.py:86: in create_reviews
    user, moderator = create_users_api(admin_client)
tests/common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
env/lib/python3.8/site-packages/django/db/models/manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
>           raise self.model.DoesNotExist(
                "%s matching query does not exist." %
                self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

env/lib/python3.8/site-packages/django/db/models/query.py:406: DoesNotExist
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/
______________ Test06CommentAPI.test_04_comment_check_permission _______________

self = <tests.test_06_comment.Test06CommentAPI object at 0x7f60f31b7700>
client = <django.test.client.Client object at 0x7f60f36ae7f0>
admin_client = <rest_framework.test.APIClient object at 0x7f60f31a5c40>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_comment_check_permission(self, client, admin_client, admin):
>       comments, reviews, titles, user, moderator = create_comments(admin_client, admin)

tests/test_06_comment.py:228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/common.py:105: in create_comments
    reviews, titles, user, moderator = create_reviews(admin_client, admin)
tests/common.py:86: in create_reviews
    user, moderator = create_users_api(admin_client)
tests/common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
env/lib/python3.8/site-packages/django/db/models/manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
>           raise self.model.DoesNotExist(
                "%s matching query does not exist." %
                self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

env/lib/python3.8/site-packages/django/db/models/query.py:406: DoesNotExist
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/
--------------------------- Captured stderr teardown ---------------------------
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
=========================== short test summary info ============================
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_user_signup
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_admin_create_user
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_obtain_jwt_token_invalid_data
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_me_username_restricted
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_same_email_restricted
FAILED tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin - Asser...
FAILED tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search - A...
FAILED tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin - A...
FAILED tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_07_01_users_username_patch_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_08_01_users_username_delete_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_09_users_check_permissions
FAILED tests/test_01_users.py::Test01UserAPI::test_10_users_me_get_admin - us...
FAILED tests/test_01_users.py::Test01UserAPI::test_11_01_users_me_patch_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_11_02_users_me_patch_user
FAILED tests/test_02_category.py::Test02CategoryAPI::test_01_category_not_auth
FAILED tests/test_02_category.py::Test02CategoryAPI::test_02_category_admin
FAILED tests/test_02_category.py::Test02CategoryAPI::test_03_category_delete_admin
FAILED tests/test_02_category.py::Test02CategoryAPI::test_04_category_check_permission_admin
FAILED tests/test_03_genre.py::Test03GenreAPI::test_01_genre_not_auth - TypeE...
FAILED tests/test_03_genre.py::Test03GenreAPI::test_02_genre - TypeError: 'ty...
FAILED tests/test_03_genre.py::Test03GenreAPI::test_03_genres_delete - TypeEr...
FAILED tests/test_03_genre.py::Test03GenreAPI::test_04_genres_check_permission
FAILED tests/test_04_title.py::Test04TitleAPI::test_02_title_admin - Assertio...
FAILED tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail - Assert...
FAILED tests/test_04_title.py::Test04TitleAPI::test_04_titles_check_permission
FAILED tests/test_05_review.py::Test05ReviewAPI::test_02_review_admin - users...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail - user...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_04_reviews_check_permission
FAILED tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth
FAILED tests/test_06_comment.py::Test06CommentAPI::test_02_comment - users.mo...
FAILED tests/test_06_comment.py::Test06CommentAPI::test_03_review_detail - us...
FAILED tests/test_06_comment.py::Test06CommentAPI::test_04_comment_check_permission
======================== 33 failed, 20 passed in 12.26s ========================
